# Generated by Django 2.2.6 on 2019-12-19 02:19

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='feedback',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate_of_percieved_exertion', models.CharField(choices=[('0', '0 = no activity'), ('1', '1 = very easy'), ('2', '2 = easy'), ('3', '3 = moderate'), ('4', '4 = somewhat hard'), ('5', '5 = hard'), ('6', '6 = very hard'), ('7', '7 = maximal')], max_length=50)),
            ],
            options={
                'db_table': 'feedback',
            },
        ),
        migrations.CreateModel(
            name='games',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('game_id', models.CharField(choices=[('Tennis', 'tennis'), ('Golf', 'golf'), ('Soccer', 'soccer'), ('Basketball', 'basketball'), ('Baseball', 'baseball'), ('Football', 'football'), ('Badminton', 'badminton'), ('Volleyball', 'volleyball')], max_length=50)),
                ('game_description', models.CharField(default='', max_length=1000)),
            ],
            options={
                'db_table': 'games',
            },
        ),
        migrations.CreateModel(
            name='exercises',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bodypart', models.CharField(choices=[('shoulder, back, knee', 'tennis'), ('elbow, wrist, shoulder, lumbar', 'golf'), ('ankle, knee', 'soccer'), ('ankle, knee', 'basketball'), ('knee, shoulder', 'baseball'), ('knee, ankle', 'badminton'), ('ankle, shoulder, back', 'volleyball')], max_length=50)),
                ('exercise_list', models.CharField(max_length=300)),
                ('reps', models.CharField(max_length=300)),
                ('video_link', models.CharField(max_length=500)),
                ('game_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gamefitnessweb.games')),
            ],
            options={
                'db_table': 'exercises',
            },
        ),
        migrations.CreateModel(
            name='users',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('height', models.DecimalField(decimal_places=2, max_digits=5)),
                ('weight', models.DecimalField(decimal_places=2, max_digits=5)),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=50)),
                ('game_id', models.CharField(choices=[('Tennis', 'tennis'), ('Golf', 'golf'), ('Soccer', 'soccer'), ('Basketball', 'basketball'), ('Baseball', 'baseball'), ('Football', 'football'), ('Badminton', 'badminton'), ('Volleyball', 'volleyball')], max_length=200)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
